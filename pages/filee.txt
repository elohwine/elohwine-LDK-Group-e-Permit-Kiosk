Here’s a **single-file**, production-ready React component for a **Material UI v5** onboarding splash/tour tailored to your **ePermit kiosk**. It includes a clean carousel with touch + click navigation, animated slide transitions (Framer Motion), dots, arrows, and **inline SVG illustrations** (no external assets). It’s built in **JavaScript** (no TS), so Copilot can drop it straight into your project.```jsx// KioskOnboarding.jsimport * as React from "react";import { Box, Button, IconButton, Typography, MobileStepper, Paper, Stack } from "@mui/material";import ChevronLeft from "@mui/icons-material/ChevronLeft";import ChevronRight from "@mui/icons-material/ChevronRight";import Close from "@mui/icons-material/Close";import CheckCircle from "@mui/icons-material/CheckCircle";import { motion, AnimatePresence } from "framer-motion";/** * Props: * - onFinish: () => void   // called when "Get Started" is pressed on the last slide * - onSkip?: () => void    // optional Skip handler * - kioskBrand?: { name?: string, primary?: string, accent?: string, bg?: string } */export default function KioskOnboarding({  onFinish = () => {},  onSkip,  kioskBrand = {    name: "ePermit Kiosk",    primary: "#4F46E5", // indigo-600    accent: "#FCD34D",  // amber-300    bg: "#F7F7FA"  }}) {  const slides = [    {      key: "why",      title: "Apply for your ePermit in seconds",      body:        "Skip lines and paperwork. Use this kiosk to create and receive a verifiable ePermit fast—no site manager needed.",      Illustration: SVGWhy    },    {      key: "how",      title: "How it works",      body:        "Scan your ID, enter visit details, and confirm. The kiosk issues a secure QR ePermit you can show at checkpoints.",      Illustration: SVGHow    },    {      key: "use",      title: "Use it anywhere on site",      body:        "Your ePermit lives as a QR code. Print it here or carry it on your phone. Security can verify it offline instantly.",      Illustration: SVGUse    }  ];  const [index, setIndex] = React.useState(0);  const [touchStartX, setTouchStartX] = React.useState(null);  const max = slides.length - 1;  const goNext = () => setIndex((i) => Math.min(i + 1, max));  const goBack = () => setIndex((i) => Math.max(i - 1, 0));  // Touch handlers for swipe  const onTouchStart = (e) => setTouchStartX(e.touches[0].clientX);  const onTouchEnd = (e) => {    if (touchStartX == null) return;    const delta = e.changedTouches[0].clientX - touchStartX;    if (delta < -50) goNext();    if (delta > 50) goBack();    setTouchStartX(null);  };  // Keyboard arrows (optional for maintenance convenience; kiosk may disable keyboard)  React.useEffect(() => {    const handler = (e) => {      if (e.key === "ArrowRight") goNext();      if (e.key === "ArrowLeft") goBack();    };    window.addEventListener("keydown", handler);    return () => window.removeEventListener("keydown", handler);  }, []);  const { Illustration } = slides[index];  return (    <Box      sx={{        minHeight: "100vh",        bgcolor: kioskBrand.bg,        display: "grid",        placeItems: "center",        p: { xs: 2, sm: 3 }      }}    >      <Paper        elevation={2}        sx={{          width: { xs: "100%", sm: 520, md: 560 },          borderRadius: 4,          overflow: "hidden",          bgcolor: "#fff"        }}      >        {/* Header */}        <Box          sx={{            display: "flex",            alignItems: "center",            justifyContent: "space-between",            p: 2,            borderBottom: "1px solid",            borderColor: "divider"          }}        >          <Typography variant="subtitle2" sx={{ letterSpacing: 0.3, color: "text.secondary" }}>            {kioskBrand.name}          </Typography>          {onSkip && (            <Button              size="small"              onClick={onSkip}              startIcon={<Close fontSize="small" />}              sx={{ textTransform: "none" }}            >              Skip            </Button>          )}        </Box>        {/* Slide body */}        <Box          onTouchStart={onTouchStart}          onTouchEnd={onTouchEnd}          sx={{ p: { xs: 3, sm: 4 } }}        >          <Box sx={{ position: "relative", height: 300, display: "grid", placeItems: "center" }}>            <AnimatePresence mode="wait">              <motion.div                key={slides[index].key}                initial={{ opacity: 0, x: 40 }}                animate={{ opacity: 1, x: 0 }}                exit={{ opacity: 0, x: -40 }}                transition={{ duration: 0.35 }}                style={{ width: "100%" }}              >                <Box sx={{ display: "grid", placeItems: "center", mb: 2 }}>                  <Illustration primary={kioskBrand.primary} accent={kioskBrand.accent} />                </Box>                <Typography                  variant="h6"                  align="center"                  sx={{ fontWeight: 700, mb: 1, px: 1 }}                >                  {slides[index].title}                </Typography>                <Typography                  variant="body2"                  align="center"                  sx={{ color: "text.secondary", maxWidth: 440, mx: "auto" }}                >                  {slides[index].body}                </Typography>              </motion.div>            </AnimatePresence>            {/* Arrows */}            <IconButton              aria-label="previous"              onClick={goBack}              disabled={index === 0}              sx={{                position: "absolute",                left: 4,                top: "50%",                transform: "translateY(-50%)",                bgcolor: "background.paper",                boxShadow: 1,                "&:disabled": { opacity: 0.3 },              }}            >              <ChevronLeft />            </IconButton>            <IconButton              aria-label="next"              onClick={goNext}              disabled={index === max}              sx={{                position: "absolute",                right: 4,                top: "50%",                transform: "translateY(-50%)",                bgcolor: "background.paper",                boxShadow: 1,                "&:disabled": { opacity: 0.3 },              }}            >              <ChevronRight />            </IconButton>          </Box>          {/* Dots + Primary CTA */}          <Stack direction="column" spacing={2} sx={{ mt: 1 }}>            <MobileStepper              variant="dots"              steps={slides.length}              position="static"              activeStep={index}              sx={{                bgcolor: "transparent",                "& .MuiMobileStepper-dotActive": { backgroundColor: kioskBrand.primary }              }}              nextButton={<span />}              backButton={<span />}            />            {index < max ? (              <Button                fullWidth                size="large"                onClick={goNext}                variant="contained"                sx={{                  bgcolor: kioskBrand.primary,                  "&:hover": { bgcolor: kioskBrand.primary }                }}              >                Continue              </Button>            ) : (              <Button                fullWidth                size="large"                onClick={onFinish}                variant="contained"                startIcon={<CheckCircle />}                sx={{                  bgcolor: kioskBrand.primary,                  "&:hover": { bgcolor: kioskBrand.primary }                }}              >                Get Started              </Button>            )}            {/* Secondary helper text */}            <Typography              variant="caption"              align="center"              sx={{ color: "text.secondary" }}            >              Swipe or use arrows to navigate            </Typography>          </Stack>        </Box>      </Paper>    </Box>  );}/* ===== Inline SVG Illustrations (clean, minimal, brandable) ===== */function SVGFrame({ children }) {  return (    <Box      component="svg"      xmlns="http://www.w3.org/2000/svg"      viewBox="0 0 520 220"      sx={{ width: "100%", maxWidth: 420 }}    >      {/* soft glow */}      <defs>        <radialGradient id="g" cx="50%" cy="50%" r="60%">          <stop offset="0%" stopColor="#000" stopOpacity="0.04" />          <stop offset="100%" stopColor="#000" stopOpacity="0" />        </radialGradient>      </defs>      <rect x="0" y="0" width="520" height="220" fill="url(#g)" />      {children}    </Box>  );}function PhoneShell({ primary, accent }) {  return (    <g>      <rect x="150" y="15" rx="24" ry="24" width="220" height="190" fill="#fff" stroke="#E6E6EF" />      <rect x="165" y="40" width="190" height="140" rx="12" fill="#F7F7FA" />      <circle cx="260" cy="28" r="4" fill="#E6E6EF" />      {/* accent confetti */}      <circle cx="120" cy="70" r="4" fill={accent} opacity="0.5" />      <circle cx="410" cy="50" r="3" fill={accent} opacity="0.5" />      <circle cx="100" cy="155" r="3" fill={primary} opacity="0.25" />      <circle cx="420" cy="165" r="4" fill={primary} opacity="0.25" />    </g>  );}function SVGWhy({ primary, accent }) {  return (    <SVGFrame>      <PhoneShell primary={primary} accent={accent} />      {/* speed bars */}      <rect x="180" y="70" width="80" height="12" rx="6" fill={primary} opacity="0.9" />      <rect x="270" y="70" width="60" height="12" rx="6" fill={primary} opacity="0.4" />      <rect x="180" y="95" width="150" height="10" rx="5" fill="#D8DAE6" />      <rect x="180" y="115" width="120" height="10" rx="5" fill="#D8DAE6" />      <rect x="180" y="135" width="90" height="10" rx="5" fill="#D8DAE6" />      {/* lightning badge */}      <g transform="translate(340 38)">        <circle cx="0" cy="0" r="14" fill={accent} />        <path d="M-3,-2 L4,-2 L0,6 L7,6 L-1,18 L2,8 L-5,8 Z" fill="#7C5A00" opacity="0.25" />      </g>    </SVGFrame>  );}function SVGHow({ primary, accent }) {  return (    <SVGFrame>      <PhoneShell primary={primary} accent={accent} />      {/* steps: Scan -> Details -> Confirm */}      {/* Scan */}      <rect x="185" y="62" width="40" height="40" rx="8" fill="#fff" stroke="#DFE1ED" />      <rect x="192" y="69" width="26" height="26" rx="6" fill="#EDEEF6" />      <rect x="196" y="73" width="18" height="18" rx="4" fill={primary} opacity="0.35" />      {/* Details */}      <rect x="235" y="62" width="40" height="40" rx="8" fill="#fff" stroke="#DFE1ED" />      <rect x="242" y="69" width="26" height="26" rx="6" fill="#EDEEF6" />      <path d="M246 82 h18" stroke={primary} strokeWidth="3" strokeLinecap="round" />      <circle cx="255" cy="78" r="5" fill={primary} opacity="0.5" />      {/* Confirm */}      <rect x="285" y="62" width="40" height="40" rx="8" fill="#fff" stroke="#DFE1ED" />      <rect x="292" y="69" width="26" height="26" rx="6" fill="#EDEEF6" />      <path d="M296 82 l6 6 l12 -14" stroke={primary} strokeWidth="3" fill="none" strokeLinecap="round" />      {/* progress line */}      <rect x="195" y="112" width="120" height="6" rx="3" fill={accent} opacity="0.65" />      {/* helper bars */}      <rect x="185" y="130" width="140" height="10" rx="5" fill="#DEE0ED" />      <rect x="185" y="147" width="110" height="10" rx="5" fill="#DEE0ED" />    </SVGFrame>  );}function SVGUse({ primary, accent }) {  return (    <SVGFrame>      <PhoneShell primary={primary} accent={accent} />      {/* QR area */}      <rect x="205" y="65" width="110" height="110" rx="10" fill="#fff" stroke="#DFE1ED" />      {/* simple QR pattern */}      <g fill={primary} opacity="0.85">        <rect x="215" y="75" width="24" height="24" />        <rect x="281" y="75" width="24" height="24" />        <rect x="215" y="141" width="24" height="24" />        <rect x="249" y="109" width="12" height="12" />        <rect x="269" y="129" width="9" height="9" />        <rect x="259" y="85" width="9" height="9" />      </g>      {/* caption bars */}      <rect x="200" y="180" width="125" height="8" rx="4" fill="#D9DBE8" />      {/* signal icons */}      <circle cx="120" cy="60" r="4" fill={accent} />      <rect x="400" y="60" width="4" height="14" fill={accent} />      <rect x="407" y="54" width="4" height="20" fill={accent} />      <rect x="414" y="48" width="4" height="26" fill={accent} />    </SVGFrame>  );}/* ===== Usage =====import KioskOnboarding from "./KioskOnboarding";<KioskOnboarding  onFinish={() => {    // e.g., route to your kiosk flow start:    // router.push("/kiosk/apply");    // or trigger your IndexedDB + VC issuance bootstrap  }}  onSkip={() => {    // optional: allow staff to bypass onboarding  }}  kioskBrand={{    name: "CityWorks ePermit",    primary: "#2563EB",    accent: "#FACC15",    bg: "#F3F4F6"  }}/>*/```adapt to our existing MUI theme .
